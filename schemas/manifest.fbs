include "sst.fbs";

table Uuid {
    high: uint64;
    low: uint64;
}

// Reference to an external database.
table ExternalDb {
    // Path to root of the external database
    path: string (required);

    // Externally owned Checkpoint ID we've used to create an initial state of cloned database.
    source_checkpoint_id: Uuid (required);

    // Checkpoint ID this database has placed on the external database that prevents referenced
    // data files from being GC'd. Both final_checkpoint_id and source_checkpoint_id should resolve
    // to the same manifest_id as long as they both still exist.
    final_checkpoint_id: Uuid;

    // Compacted SST IDs belonging to external DB that are currently being referenced.
    sst_ids: [CompactedSstId] (required);
}

enum BoundType : byte { Unknown = 0, Unbounded, Included, Excluded }

table BytesBound {
    // Key that represenents the boundary. Might be empty if type is Unbounded.
    key: [ubyte];

    // Whether the bound is inclusive, exclusive or unbounded.
    bound_type: BoundType;
}

table BytesRange {
    // Start bound of the range.
    start_bound: BytesBound (required);

    // End bound of the range.
    end_bound: BytesBound (required);
}

// Manifest to persist state of DB.
table ManifestV1 {
    // Id of manifest. Manifest file name will be derived from this id.
    manifest_id: ulong;

    // List of external databases referenced by this manifest.
    external_dbs: [ExternalDb];

    // Flag to indicate whether initialization has finished. When creating the initial manifest for
    // a root db (one that is not a clone), this flag will be set to true. When creating the initial
    // manifest for a clone db, this flag will be set to false and then updated to true once clone
    // initialization has completed.
    initialized: bool;

    // The current writer's epoch.
    writer_epoch: ulong;

    // The current compactor's epoch.
    compactor_epoch: ulong;

    // Tracks the most recent SST in the WAL that has been flushed on the last L0 is compacted. When an Immutable 
    // Memtable (IMM) is flushed to L0, we record the recent flushed WAL ID as `replay_after_wal_id`. During recovery,
    // we use `replay_after_wal_id + 1` as the starting point for WAL replay, and skip the WAL entries with
    // smaller `seq` than `last_l0_seq`.
    replay_after_wal_id: ulong;

    // The most recent SST in the WAL at the time manifest was updated.
    wal_id_last_seen: ulong;

    // The last compacted l0
    l0_last_compacted: CompactedSstId;

    // A list of the L0 SSTs that are valid to read in the `compacted` folder.
    l0: [CompactedSsTable] (required);

    // A list of the sorted runs that are valid to read in the `compacted` folder.
    compacted: [SortedRun] (required);

    // The last L0 clock tick (the database should restore the latest
    // tick when recovering from WAL if there are any WAL entries)
    last_l0_clock_tick: long;

    // A list of checkpoints that are currently open.
    checkpoints: [Checkpoint] (required);

    // The last seq number
    last_l0_seq: ulong;

    // The URI of the object store dedicated specifically for WAL, if any.
    wal_object_store_uri: string;

    // Minimum sequence number across all recent in-memory (write) snapshots. The compactor
    // needs this to determine whether it's safe to drop duplicate key writes. If a recent snapshot
    // still references an older version of a key, it should not be dropped.
    recent_snapshot_min_seq: ulong;
}

table CompactedSstId {
    high: uint64;
    low: uint64;
}

table CompactedSsTable {
    id: CompactedSstId (required);
    info: SsTableInfo (required);
    visible_range: BytesRange;
}

table SortedRun {
    id: uint32;
    ssts: [CompactedSsTable] (required);
}

table WriterCheckpoint {
    epoch: uint64;
}

union CheckpointMetadata { WriterCheckpoint }

// Checkpoint reference to be included in manifest to record active checkpoints.
table Checkpoint {
    // Id that must be unique across all open checkpoints.
    id: Uuid (required);

    // The manifest ID that this checkpoint is using as its `DbState`.
    manifest_id: ulong;

    // The UTC unix timestamp seconds that a checkpoint expires at. Clients may update this value.
    // If `checkpoint_expire_time_s` is older than now(), the checkpoint is considered expired.
    // If `checkpoint_expire_time_s` is 0, the checkpoint will never expire.
    checkpoint_expire_time_s: uint;

    // The unix timestamp seconds that the checkpoint was created
    checkpoint_create_time_s: uint;

    // Optional metadata associated with the checkpoint. For example, the writer can use this to
    // clean up checkpoints from older writers.
    metadata: CheckpointMetadata;
}
