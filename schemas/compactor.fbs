include "sst.fbs";
include "common.fbs";

enum CompactionType : byte { Internal, External, }

enum CompactionStatus : byte {
    Submitted,      // Waiting to be scheduled
    Pending,        // Waiting to be executed
    InProgress,     // Currently executing
    Completed,      // Successfully finished
    Failed,         // Failed with error
}

union CompactionJobSpec { LinearCompactionJob /*, ParallelCompactionJob */ }

/*
table ParallelCompactionJob {
    shards: [SubCompactionJob]
}

table SubCompactionJob {
    // Sub CompactionJob ID(Ulid)
    sub_job_id: Ulid;

    // InputSSTables completed before the job started
    completed_input_sst_ids:[CompactedSstId];

    // InputSortedRuns completed before the job started
    completed_input_sr_ids:[uint32];

    // Subset of InputSSTables to be compacted
    input_sst:[CompactedSsTable];

    // Subset of InputSortedRuns to be compacted
    input_sr:[SortedRun];

    // Output SR of the subset Input SSTs and SortedRuns
    output_sr:SortedRun;
}
*/

table LinearCompactionJob {
    // InputSSTables completed before the job started
    completed_input_sst_ids:[CompactedSstId];

    // InputSortedRuns completed before the job started
    completed_input_sr_ids:[uint32];
}

table CompactionJob {
    // CompactionJob ID(Ulid)
    job_id: Ulid (required);

    // Reference to the compaction to which this job belongs
    compaction_id: Ulid (required);

    spec: CompactionJobSpec (required);
}

union CompactionSpec { SortedRunCompaction }

table SortedRunCompaction {
    // input L0 SSTables
    ssts: [CompactedSsTable]; 

    // input Sorted Runs
    sorted_runs: [SortedRun];
}

table Compaction {
    // Compaction Status visible to public API
    status: CompactionStatus = Submitted;

    // Destination Sorted Run ID
    destination: uint32;

    // Destination Sorted Run
    output_sorted_run: SortedRun;

    // Identifier to reference a Compaction(Ulid)
    // Ulid can be used get the human readable timestamp:
    // https://docs.rs/ulid/latest/ulid/struct.Ulid.html#method.timestamp_ms
    // Can also be a replacement from created_ts
    compaction_id: Ulid (required);

    // Compaction Type to distinguish between internal or external
    compaction_type: CompactionType = Internal;

    // List of CompactionJob Retries
    job_attempts:[CompactionJob] (required);

    spec: CompactionSpec (required);
}


table CompactionState {
    // Fencing token to ensure single active compactor
    compactor_epoch: uint64;

    // Compactions in scheduled, in_progress and recently completed compactions
    recent_compactions: [Compaction] (required);
}