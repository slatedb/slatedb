include "sst.fbs";

table SsTableId {
    high: uint64;
    low: uint64;
}

enum SourceIdType : byte {
    SortedRun = 0,
    Sst = 1;
}

table SourceId {
    type: SourceIdType;
    sorted_run_id: uint32;  // Only used if type == SortedRun
    sst_ulid: string;       // Only used if type == Sst
}

// Has metadata about a SST file.
table SsTableInfo {
    // First key in the SST file.
    first_key: [ubyte];

    // Offset of the index block.
    index_offset: ulong;

    // Length of the index block.
    index_len: ulong;

    // Offset of the bloom filter.
    filter_offset: ulong;

    // Length of bloom filter. Length will be zero if filter is not present.
    filter_len: ulong;

    // Type of compression algorithm used.
    compression_format: CompressionFormat;
}

table SsTableHandle {
    id: SsTableId (required);
    info: SsTableInfo (required);
    visible_range: BytesRange;
    effective_range: BytesRange;
}

table SortedRun {
    // SortedRun Identifier 
    id: uint32;

    // List of ordered SSTables in the sorted run 
    ssts: [SsTableHandle] (required);
}

enum CompactionType : byte { Internal = 0, External; }

enum CompactionStatus : byte {
    Submitted = 0,      // Waiting to be scheduled
    InProgress,     // Currently executing
    Completed,      // Successfully finished
    Failed,         // Failed with error
    Cancelled;      // Cancelled by request
}

enum CompactionPriority : byte {
    Critical = 0,  // Preempts all other compactions
    High,      // Preempts normal/low compactions  
    Normal,    // Standard automatic compaction priority
    Low;       // Background maintenance priority
}

table CompactionProgress {
    input_ssts_processed: uint32;
    total_input_ssts: uint32;
    output_ssts_written: uint32;
    bytes_processed: uint64;
    completion_percentage: float64;
    estimated_completion_ms: uint64;  // Optional timestamp
}

table CompactionJob {
    // CompactorJob ID
    job_id: ulong;

    // Destination Sorted Run ID
    destination: u32 (required);

    // input L0 SSTables
    ssts: [SsTableHandle]; 

    // input Sorted Runs
    sorted_runs: [SortedRun];

    compaction_ts: i64; 

    is_dest_last_run: bool;

    // Timestamp when CompactionJob was created
    created_ts: uint64
    
    // InputSSTables completed
    completed_input_ssts:[uint64];

    // Output SSTs to be persisted   
    output_ssts_written:[uint64];

    // Current CompactionJob Status
    current_status: CompactionStatus;

    // Tracking Compaction Progress
    job_progress: CompactionProgress;
}

table Compaction {
    // Compaction Status visible to public API
    status: CompactionStatus;

    // Input L0 SSTables and SRs to be compressed
    sources: [SourceId];

    // Output Source Destination
    destination: uint32;

    // Identifier to reference a Compaction
    compaction_id: uint64;

    // Compaction Type to distinguish between internal or external
    compaction_type: CompactionType (required);

    // Priority to handle external compaction requests
    compaction_priority: CompactionPriority;

    // List of CompactionJob Retries
    job_attempts:[CompactionJob];

    // Creation Timestamp of Compaction
    created_ts: uint64

    // Creation Timestamp of Compaction
    updated_ts: uint64
}


table CompactionState {
    // Identifier of the compaction state
    compaction_state_id: uint64;

    // Fencing token to ensure single active compactor
    compactor_epoch: uint64;

    // Next state ID to use for CAS operations
    // Current state ID = this value - 1
    next_compactor_state_id: uint64 (required);

    // Compactions in scheduled, in_progress and recently completed compactions
    active_compactions: [Compaction];

    // Creation Timestamp of CompactionState
    created_at: uint64
}

root_type CompactionState;