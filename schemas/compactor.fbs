include "sst.fbs";
include "common.fbs";

enum CompactorJobRequestType : byte { Internal = 0, External, }

enum CompactorJobStatus : byte {
    Submitted = 0,  // Waiting to be scheduled
    Pending,        // Waiting to be executed
    InProgress,     // Currently executing
    Completed,      // Successfully finished
    Failed,         // Failed with error
}

union CompactorJobProgress { LinearCompactorJobProgress }

table LinearCompactorJobProgress {
    // InputSSTables completed before the job started
    completed_input_sst_ids:[CompactedSstId];

    // InputSortedRuns completed before the job started
    completed_input_sr_ids:[uint32];
}

table CompactorJobAttempt {
    // CompactorJobAttempt ID(Ulid)
    id: Ulid (required);

    // Reference to the compaction to which this job belongs
    compactor_job_id: Ulid (required);

    progress: CompactorJobProgress (required);
}

union CompactorJobInput { SortedRunJobInputs }

table SortedRunJobInputs {
    // input L0 SSTables
    ssts: [CompactedSsTable]; 

    // input Sorted Runs
    sorted_runs: [SortedRun];
}

table CompactorJob {
    // Compaction Status visible to public API
    status: CompactorJobStatus = Submitted;

    // Destination Sorted Run ID
    destination: uint32;

    // Destination Sorted Run
    output_sorted_run: SortedRun;

    // Identifier to reference a Compaction(Ulid)
    // Ulid can be used get the human readable timestamp:
    // https://docs.rs/ulid/latest/ulid/struct.Ulid.html#method.timestamp_ms
    // Can also be a replacement from created_ts
    id: Ulid (required);

    // Compaction Type to distinguish between internal or external
    request_type: CompactorJobRequestType = Internal;

    // List of CompactorJob Retries
    job_attempts:[CompactorJobAttempt] (required);

    spec: CompactorJobInput (required);
}


table CompactionState {
    // Fencing token to ensure single active compactor
    compactor_epoch: uint64;

    // Compactions in scheduled, in_progress and recently completed compactions
    recent_jobs: [CompactorJob] (required);
}