// automatically generated by the FlatBuffers compiler, do not modify

// @generated
#![allow(warnings)]
use core::cmp::Ordering;
use core::mem;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum SsTableInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SsTableInfo<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SsTableInfo<'a> {
    type Inner = SsTableInfo<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> SsTableInfo<'a> {
    pub const VT_FIRST_KEY: flatbuffers::VOffsetT = 4;
    pub const VT_BLOCK_META: flatbuffers::VOffsetT = 6;
    pub const VT_FILTER_OFFSET: flatbuffers::VOffsetT = 8;
    pub const VT_FILTER_LEN: flatbuffers::VOffsetT = 10;
    pub const VT_BLOCK_META_OFFSET: flatbuffers::VOffsetT = 12;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        SsTableInfo { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args SsTableInfoArgs<'args>,
    ) -> flatbuffers::WIPOffset<SsTableInfo<'bldr>> {
        let mut builder = SsTableInfoBuilder::new(_fbb);
        builder.add_block_meta_offset(args.block_meta_offset);
        builder.add_filter_len(args.filter_len);
        builder.add_filter_offset(args.filter_offset);
        if let Some(x) = args.block_meta {
            builder.add_block_meta(x);
        }
        if let Some(x) = args.first_key {
            builder.add_first_key(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn first_key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    SsTableInfo::VT_FIRST_KEY,
                    None,
                )
        }
    }
    #[inline]
    pub fn block_meta(
        &self,
    ) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta<'a>>> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<
                    flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta>>,
                >>(SsTableInfo::VT_BLOCK_META, None)
                .unwrap()
        }
    }
    #[inline]
    pub fn filter_offset(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(SsTableInfo::VT_FILTER_OFFSET, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn filter_len(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(SsTableInfo::VT_FILTER_LEN, Some(0))
                .unwrap()
        }
    }
    #[inline]
    pub fn block_meta_offset(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<u64>(SsTableInfo::VT_BLOCK_META_OFFSET, Some(0))
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for SsTableInfo<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "first_key",
                Self::VT_FIRST_KEY,
                false,
            )?
            .visit_field::<flatbuffers::ForwardsUOffset<
                flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BlockMeta>>,
            >>("block_meta", Self::VT_BLOCK_META, true)?
            .visit_field::<u64>("filter_offset", Self::VT_FILTER_OFFSET, false)?
            .visit_field::<u64>("filter_len", Self::VT_FILTER_LEN, false)?
            .visit_field::<u64>("block_meta_offset", Self::VT_BLOCK_META_OFFSET, false)?
            .finish();
        Ok(())
    }
}
pub struct SsTableInfoArgs<'a> {
    pub first_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub block_meta: Option<
        flatbuffers::WIPOffset<
            flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta<'a>>>,
        >,
    >,
    pub filter_offset: u64,
    pub filter_len: u64,
    pub block_meta_offset: u64,
}
impl<'a> Default for SsTableInfoArgs<'a> {
    #[inline]
    fn default() -> Self {
        SsTableInfoArgs {
            first_key: None,
            block_meta: None, // required field
            filter_offset: 0,
            filter_len: 0,
            block_meta_offset: 0,
        }
    }
}

pub struct SsTableInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SsTableInfoBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_first_key(
        &mut self,
        first_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(SsTableInfo::VT_FIRST_KEY, first_key);
    }
    #[inline]
    pub fn add_block_meta(
        &mut self,
        block_meta: flatbuffers::WIPOffset<
            flatbuffers::Vector<'b, flatbuffers::ForwardsUOffset<BlockMeta<'b>>>,
        >,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(SsTableInfo::VT_BLOCK_META, block_meta);
    }
    #[inline]
    pub fn add_filter_offset(&mut self, filter_offset: u64) {
        self.fbb_
            .push_slot::<u64>(SsTableInfo::VT_FILTER_OFFSET, filter_offset, 0);
    }
    #[inline]
    pub fn add_filter_len(&mut self, filter_len: u64) {
        self.fbb_
            .push_slot::<u64>(SsTableInfo::VT_FILTER_LEN, filter_len, 0);
    }
    #[inline]
    pub fn add_block_meta_offset(&mut self, block_meta_offset: u64) {
        self.fbb_
            .push_slot::<u64>(SsTableInfo::VT_BLOCK_META_OFFSET, block_meta_offset, 0);
    }
    #[inline]
    pub fn new(
        _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    ) -> SsTableInfoBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        SsTableInfoBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<SsTableInfo<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_
            .required(o, SsTableInfo::VT_BLOCK_META, "block_meta");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for SsTableInfo<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("SsTableInfo");
        ds.field("first_key", &self.first_key());
        ds.field("block_meta", &self.block_meta());
        ds.field("filter_offset", &self.filter_offset());
        ds.field("filter_len", &self.filter_len());
        ds.field("block_meta_offset", &self.block_meta_offset());
        ds.finish()
    }
}
pub enum BlockMetaOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlockMeta<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockMeta<'a> {
    type Inner = BlockMeta<'a>;
    #[inline]
    unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table::new(buf, loc),
        }
    }
}

impl<'a> BlockMeta<'a> {
    pub const VT_OFFSET: flatbuffers::VOffsetT = 4;
    pub const VT_FIRST_KEY: flatbuffers::VOffsetT = 6;

    #[inline]
    pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        BlockMeta { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
        args: &'args BlockMetaArgs<'args>,
    ) -> flatbuffers::WIPOffset<BlockMeta<'bldr>> {
        let mut builder = BlockMetaBuilder::new(_fbb);
        builder.add_offset(args.offset);
        if let Some(x) = args.first_key {
            builder.add_first_key(x);
        }
        builder.finish()
    }

    #[inline]
    pub fn offset(&self) -> u64 {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe { self._tab.get::<u64>(BlockMeta::VT_OFFSET, Some(0)).unwrap() }
    }
    #[inline]
    pub fn first_key(&self) -> flatbuffers::Vector<'a, u8> {
        // Safety:
        // Created from valid Table for this object
        // which contains a valid value in this slot
        unsafe {
            self._tab
                .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                    BlockMeta::VT_FIRST_KEY,
                    None,
                )
                .unwrap()
        }
    }
}

impl flatbuffers::Verifiable for BlockMeta<'_> {
    #[inline]
    fn run_verifier(
        v: &mut flatbuffers::Verifier,
        pos: usize,
    ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
        use self::flatbuffers::Verifiable;
        v.visit_table(pos)?
            .visit_field::<u64>("offset", Self::VT_OFFSET, false)?
            .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                "first_key",
                Self::VT_FIRST_KEY,
                true,
            )?
            .finish();
        Ok(())
    }
}
pub struct BlockMetaArgs<'a> {
    pub offset: u64,
    pub first_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for BlockMetaArgs<'a> {
    #[inline]
    fn default() -> Self {
        BlockMetaArgs {
            offset: 0,
            first_key: None, // required field
        }
    }
}

pub struct BlockMetaBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlockMetaBuilder<'a, 'b, A> {
    #[inline]
    pub fn add_offset(&mut self, offset: u64) {
        self.fbb_.push_slot::<u64>(BlockMeta::VT_OFFSET, offset, 0);
    }
    #[inline]
    pub fn add_first_key(
        &mut self,
        first_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>,
    ) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(BlockMeta::VT_FIRST_KEY, first_key);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlockMetaBuilder<'a, 'b, A> {
        let start = _fbb.start_table();
        BlockMetaBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<BlockMeta<'a>> {
        let o = self.fbb_.end_table(self.start_);
        self.fbb_.required(o, BlockMeta::VT_FIRST_KEY, "first_key");
        flatbuffers::WIPOffset::new(o.value())
    }
}

impl core::fmt::Debug for BlockMeta<'_> {
    fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
        let mut ds = f.debug_struct("BlockMeta");
        ds.field("offset", &self.offset());
        ds.field("first_key", &self.first_key());
        ds.finish()
    }
}
