// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum SsTableInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SsTableInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SsTableInfo<'a> {
  type Inner = SsTableInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SsTableInfo<'a> {
  pub const VT_FIRST_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_BLOCK_META: flatbuffers::VOffsetT = 6;
  pub const VT_FILTER_OFFSET: flatbuffers::VOffsetT = 8;
  pub const VT_FILTER_LEN: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SsTableInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SsTableInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<SsTableInfo<'bldr>> {
    let mut builder = SsTableInfoBuilder::new(_fbb);
    builder.add_filter_len(args.filter_len);
    builder.add_filter_offset(args.filter_offset);
    if let Some(x) = args.block_meta { builder.add_block_meta(x); }
    if let Some(x) = args.first_key { builder.add_first_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn first_key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(SsTableInfo::VT_FIRST_KEY, None)}
  }
  #[inline]
  pub fn block_meta(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta>>>>(SsTableInfo::VT_BLOCK_META, None).unwrap()}
  }
  #[inline]
  pub fn filter_offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SsTableInfo::VT_FILTER_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn filter_len(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SsTableInfo::VT_FILTER_LEN, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for SsTableInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("first_key", Self::VT_FIRST_KEY, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BlockMeta>>>>("block_meta", Self::VT_BLOCK_META, true)?
     .visit_field::<u64>("filter_offset", Self::VT_FILTER_OFFSET, false)?
     .visit_field::<u64>("filter_len", Self::VT_FILTER_LEN, false)?
     .finish();
    Ok(())
  }
}
pub struct SsTableInfoArgs<'a> {
    pub first_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub block_meta: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta<'a>>>>>,
    pub filter_offset: u64,
    pub filter_len: u64,
}
impl<'a> Default for SsTableInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    SsTableInfoArgs {
      first_key: None,
      block_meta: None, // required field
      filter_offset: 0,
      filter_len: 0,
    }
  }
}

pub struct SsTableInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SsTableInfoBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_first_key(&mut self, first_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SsTableInfo::VT_FIRST_KEY, first_key);
  }
  #[inline]
  pub fn add_block_meta(&mut self, block_meta: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BlockMeta<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SsTableInfo::VT_BLOCK_META, block_meta);
  }
  #[inline]
  pub fn add_filter_offset(&mut self, filter_offset: u64) {
    self.fbb_.push_slot::<u64>(SsTableInfo::VT_FILTER_OFFSET, filter_offset, 0);
  }
  #[inline]
  pub fn add_filter_len(&mut self, filter_len: u64) {
    self.fbb_.push_slot::<u64>(SsTableInfo::VT_FILTER_LEN, filter_len, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SsTableInfoBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SsTableInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SsTableInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, SsTableInfo::VT_BLOCK_META,"block_meta");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SsTableInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SsTableInfo");
      ds.field("first_key", &self.first_key());
      ds.field("block_meta", &self.block_meta());
      ds.field("filter_offset", &self.filter_offset());
      ds.field("filter_len", &self.filter_len());
      ds.finish()
  }
}
pub enum BlockMetaOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlockMeta<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockMeta<'a> {
  type Inner = BlockMeta<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BlockMeta<'a> {
  pub const VT_OFFSET: flatbuffers::VOffsetT = 4;
  pub const VT_FIRST_KEY: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BlockMeta { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BlockMetaArgs<'args>
  ) -> flatbuffers::WIPOffset<BlockMeta<'bldr>> {
    let mut builder = BlockMetaBuilder::new(_fbb);
    builder.add_offset(args.offset);
    if let Some(x) = args.first_key { builder.add_first_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(BlockMeta::VT_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn first_key(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(BlockMeta::VT_FIRST_KEY, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for BlockMeta<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("offset", Self::VT_OFFSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("first_key", Self::VT_FIRST_KEY, true)?
     .finish();
    Ok(())
  }
}
pub struct BlockMetaArgs<'a> {
    pub offset: u64,
    pub first_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for BlockMetaArgs<'a> {
  #[inline]
  fn default() -> Self {
    BlockMetaArgs {
      offset: 0,
      first_key: None, // required field
    }
  }
}

pub struct BlockMetaBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlockMetaBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_offset(&mut self, offset: u64) {
    self.fbb_.push_slot::<u64>(BlockMeta::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn add_first_key(&mut self, first_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BlockMeta::VT_FIRST_KEY, first_key);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlockMetaBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BlockMetaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BlockMeta<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, BlockMeta::VT_FIRST_KEY,"first_key");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BlockMeta<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BlockMeta");
      ds.field("offset", &self.offset());
      ds.field("first_key", &self.first_key());
      ds.finish()
  }
}
pub enum ManifestV1Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ManifestV1<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ManifestV1<'a> {
  type Inner = ManifestV1<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ManifestV1<'a> {
  pub const VT_MANIFEST_ID: flatbuffers::VOffsetT = 4;
  pub const VT_WRITER_EPOCH: flatbuffers::VOffsetT = 6;
  pub const VT_COMPACTOR_EPOCH: flatbuffers::VOffsetT = 8;
  pub const VT_WAL_ID_LAST_COMPACTED: flatbuffers::VOffsetT = 10;
  pub const VT_WAL_ID_LAST_SEEN: flatbuffers::VOffsetT = 12;
  pub const VT_LEVELED_SSTS: flatbuffers::VOffsetT = 14;
  pub const VT_SNAPSHOTS: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ManifestV1 { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ManifestV1Args<'args>
  ) -> flatbuffers::WIPOffset<ManifestV1<'bldr>> {
    let mut builder = ManifestV1Builder::new(_fbb);
    builder.add_wal_id_last_seen(args.wal_id_last_seen);
    builder.add_wal_id_last_compacted(args.wal_id_last_compacted);
    builder.add_compactor_epoch(args.compactor_epoch);
    builder.add_writer_epoch(args.writer_epoch);
    builder.add_manifest_id(args.manifest_id);
    if let Some(x) = args.snapshots { builder.add_snapshots(x); }
    if let Some(x) = args.leveled_ssts { builder.add_leveled_ssts(x); }
    builder.finish()
  }


  #[inline]
  pub fn manifest_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_MANIFEST_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn writer_epoch(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_WRITER_EPOCH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn compactor_epoch(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_COMPACTOR_EPOCH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn wal_id_last_compacted(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_WAL_ID_LAST_COMPACTED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn wal_id_last_seen(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_WAL_ID_LAST_SEEN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn leveled_ssts(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SsTableInfo<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SsTableInfo>>>>(ManifestV1::VT_LEVELED_SSTS, None)}
  }
  #[inline]
  pub fn snapshots(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Snapshot<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Snapshot>>>>(ManifestV1::VT_SNAPSHOTS, None)}
  }
}

impl flatbuffers::Verifiable for ManifestV1<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("manifest_id", Self::VT_MANIFEST_ID, false)?
     .visit_field::<u64>("writer_epoch", Self::VT_WRITER_EPOCH, false)?
     .visit_field::<u64>("compactor_epoch", Self::VT_COMPACTOR_EPOCH, false)?
     .visit_field::<u64>("wal_id_last_compacted", Self::VT_WAL_ID_LAST_COMPACTED, false)?
     .visit_field::<u64>("wal_id_last_seen", Self::VT_WAL_ID_LAST_SEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<SsTableInfo>>>>("leveled_ssts", Self::VT_LEVELED_SSTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Snapshot>>>>("snapshots", Self::VT_SNAPSHOTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ManifestV1Args<'a> {
    pub manifest_id: u64,
    pub writer_epoch: u64,
    pub compactor_epoch: u64,
    pub wal_id_last_compacted: u64,
    pub wal_id_last_seen: u64,
    pub leveled_ssts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SsTableInfo<'a>>>>>,
    pub snapshots: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Snapshot<'a>>>>>,
}
impl<'a> Default for ManifestV1Args<'a> {
  #[inline]
  fn default() -> Self {
    ManifestV1Args {
      manifest_id: 0,
      writer_epoch: 0,
      compactor_epoch: 0,
      wal_id_last_compacted: 0,
      wal_id_last_seen: 0,
      leveled_ssts: None,
      snapshots: None,
    }
  }
}

pub struct ManifestV1Builder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ManifestV1Builder<'a, 'b, A> {
  #[inline]
  pub fn add_manifest_id(&mut self, manifest_id: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_MANIFEST_ID, manifest_id, 0);
  }
  #[inline]
  pub fn add_writer_epoch(&mut self, writer_epoch: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_WRITER_EPOCH, writer_epoch, 0);
  }
  #[inline]
  pub fn add_compactor_epoch(&mut self, compactor_epoch: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_COMPACTOR_EPOCH, compactor_epoch, 0);
  }
  #[inline]
  pub fn add_wal_id_last_compacted(&mut self, wal_id_last_compacted: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_WAL_ID_LAST_COMPACTED, wal_id_last_compacted, 0);
  }
  #[inline]
  pub fn add_wal_id_last_seen(&mut self, wal_id_last_seen: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_WAL_ID_LAST_SEEN, wal_id_last_seen, 0);
  }
  #[inline]
  pub fn add_leveled_ssts(&mut self, leveled_ssts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<SsTableInfo<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestV1::VT_LEVELED_SSTS, leveled_ssts);
  }
  #[inline]
  pub fn add_snapshots(&mut self, snapshots: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Snapshot<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestV1::VT_SNAPSHOTS, snapshots);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ManifestV1Builder<'a, 'b, A> {
    let start = _fbb.start_table();
    ManifestV1Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ManifestV1<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ManifestV1<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ManifestV1");
      ds.field("manifest_id", &self.manifest_id());
      ds.field("writer_epoch", &self.writer_epoch());
      ds.field("compactor_epoch", &self.compactor_epoch());
      ds.field("wal_id_last_compacted", &self.wal_id_last_compacted());
      ds.field("wal_id_last_seen", &self.wal_id_last_seen());
      ds.field("leveled_ssts", &self.leveled_ssts());
      ds.field("snapshots", &self.snapshots());
      ds.finish()
  }
}
pub enum SnapshotOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Snapshot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Snapshot<'a> {
  type Inner = Snapshot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Snapshot<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_MANIFEST_ID: flatbuffers::VOffsetT = 6;
  pub const VT_SNAPSHOT_EXPIRE_TIME_S: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Snapshot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SnapshotArgs
  ) -> flatbuffers::WIPOffset<Snapshot<'bldr>> {
    let mut builder = SnapshotBuilder::new(_fbb);
    builder.add_manifest_id(args.manifest_id);
    builder.add_id(args.id);
    builder.add_snapshot_expire_time_s(args.snapshot_expire_time_s);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Snapshot::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn manifest_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Snapshot::VT_MANIFEST_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn snapshot_expire_time_s(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Snapshot::VT_SNAPSHOT_EXPIRE_TIME_S, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Snapshot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<u64>("manifest_id", Self::VT_MANIFEST_ID, false)?
     .visit_field::<u32>("snapshot_expire_time_s", Self::VT_SNAPSHOT_EXPIRE_TIME_S, false)?
     .finish();
    Ok(())
  }
}
pub struct SnapshotArgs {
    pub id: u64,
    pub manifest_id: u64,
    pub snapshot_expire_time_s: u32,
}
impl<'a> Default for SnapshotArgs {
  #[inline]
  fn default() -> Self {
    SnapshotArgs {
      id: 0,
      manifest_id: 0,
      snapshot_expire_time_s: 0,
    }
  }
}

pub struct SnapshotBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SnapshotBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Snapshot::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_manifest_id(&mut self, manifest_id: u64) {
    self.fbb_.push_slot::<u64>(Snapshot::VT_MANIFEST_ID, manifest_id, 0);
  }
  #[inline]
  pub fn add_snapshot_expire_time_s(&mut self, snapshot_expire_time_s: u32) {
    self.fbb_.push_slot::<u32>(Snapshot::VT_SNAPSHOT_EXPIRE_TIME_S, snapshot_expire_time_s, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SnapshotBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SnapshotBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Snapshot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Snapshot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Snapshot");
      ds.field("id", &self.id());
      ds.field("manifest_id", &self.manifest_id());
      ds.field("snapshot_expire_time_s", &self.snapshot_expire_time_s());
      ds.finish()
  }
}
