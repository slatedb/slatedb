// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_COMPRESSION_FORMAT: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_COMPRESSION_FORMAT: i8 = 4;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_COMPRESSION_FORMAT: [CompressionFormat; 5] = [
  CompressionFormat::None,
  CompressionFormat::Snappy,
  CompressionFormat::Zlib,
  CompressionFormat::Lz4,
  CompressionFormat::Zstd,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct CompressionFormat(pub i8);
#[allow(non_upper_case_globals)]
impl CompressionFormat {
  pub const None: Self = Self(0);
  pub const Snappy: Self = Self(1);
  pub const Zlib: Self = Self(2);
  pub const Lz4: Self = Self(3);
  pub const Zstd: Self = Self(4);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 4;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::None,
    Self::Snappy,
    Self::Zlib,
    Self::Lz4,
    Self::Zstd,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::None => Some("None"),
      Self::Snappy => Some("Snappy"),
      Self::Zlib => Some("Zlib"),
      Self::Lz4 => Some("Lz4"),
      Self::Zstd => Some("Zstd"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for CompressionFormat {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for CompressionFormat {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for CompressionFormat {
    type Output = CompressionFormat;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for CompressionFormat {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for CompressionFormat {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for CompressionFormat {}
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MIN_SST_ROW_ATTRIBUTE: i8 = 0;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
pub const ENUM_MAX_SST_ROW_ATTRIBUTE: i8 = 1;
#[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
#[allow(non_camel_case_types)]
pub const ENUM_VALUES_SST_ROW_ATTRIBUTE: [SstRowAttribute; 2] = [
  SstRowAttribute::Flags,
  SstRowAttribute::Timestamp,
];

#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
#[repr(transparent)]
pub struct SstRowAttribute(pub i8);
#[allow(non_upper_case_globals)]
impl SstRowAttribute {
  pub const Flags: Self = Self(0);
  pub const Timestamp: Self = Self(1);

  pub const ENUM_MIN: i8 = 0;
  pub const ENUM_MAX: i8 = 1;
  pub const ENUM_VALUES: &'static [Self] = &[
    Self::Flags,
    Self::Timestamp,
  ];
  /// Returns the variant's name or "" if unknown.
  pub fn variant_name(self) -> Option<&'static str> {
    match self {
      Self::Flags => Some("Flags"),
      Self::Timestamp => Some("Timestamp"),
      _ => None,
    }
  }
}
impl core::fmt::Debug for SstRowAttribute {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    if let Some(name) = self.variant_name() {
      f.write_str(name)
    } else {
      f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
    }
  }
}
impl<'a> flatbuffers::Follow<'a> for SstRowAttribute {
  type Inner = Self;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
    Self(b)
  }
}

impl flatbuffers::Push for SstRowAttribute {
    type Output = SstRowAttribute;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        flatbuffers::emplace_scalar::<i8>(dst, self.0);
    }
}

impl flatbuffers::EndianScalar for SstRowAttribute {
  type Scalar = i8;
  #[inline]
  fn to_little_endian(self) -> i8 {
    self.0.to_le()
  }
  #[inline]
  #[allow(clippy::wrong_self_convention)]
  fn from_little_endian(v: i8) -> Self {
    let b = i8::from_le(v);
    Self(b)
  }
}

impl<'a> flatbuffers::Verifiable for SstRowAttribute {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    i8::run_verifier(v, pos)
  }
}

impl flatbuffers::SimpleToVerifyInSlice for SstRowAttribute {}
pub enum CompactedSstIdOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CompactedSstId<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CompactedSstId<'a> {
  type Inner = CompactedSstId<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CompactedSstId<'a> {
  pub const VT_HIGH: flatbuffers::VOffsetT = 4;
  pub const VT_LOW: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CompactedSstId { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CompactedSstIdArgs
  ) -> flatbuffers::WIPOffset<CompactedSstId<'bldr>> {
    let mut builder = CompactedSstIdBuilder::new(_fbb);
    builder.add_low(args.low);
    builder.add_high(args.high);
    builder.finish()
  }


  #[inline]
  pub fn high(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(CompactedSstId::VT_HIGH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn low(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(CompactedSstId::VT_LOW, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for CompactedSstId<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("high", Self::VT_HIGH, false)?
     .visit_field::<u64>("low", Self::VT_LOW, false)?
     .finish();
    Ok(())
  }
}
pub struct CompactedSstIdArgs {
    pub high: u64,
    pub low: u64,
}
impl<'a> Default for CompactedSstIdArgs {
  #[inline]
  fn default() -> Self {
    CompactedSstIdArgs {
      high: 0,
      low: 0,
    }
  }
}

pub struct CompactedSstIdBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CompactedSstIdBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_high(&mut self, high: u64) {
    self.fbb_.push_slot::<u64>(CompactedSstId::VT_HIGH, high, 0);
  }
  #[inline]
  pub fn add_low(&mut self, low: u64) {
    self.fbb_.push_slot::<u64>(CompactedSstId::VT_LOW, low, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CompactedSstIdBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CompactedSstIdBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CompactedSstId<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CompactedSstId<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CompactedSstId");
      ds.field("high", &self.high());
      ds.field("low", &self.low());
      ds.finish()
  }
}
pub enum CompactedSsTableOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct CompactedSsTable<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for CompactedSsTable<'a> {
  type Inner = CompactedSsTable<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> CompactedSsTable<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_INFO: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    CompactedSsTable { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args CompactedSsTableArgs<'args>
  ) -> flatbuffers::WIPOffset<CompactedSsTable<'bldr>> {
    let mut builder = CompactedSsTableBuilder::new(_fbb);
    if let Some(x) = args.info { builder.add_info(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> CompactedSstId<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CompactedSstId>>(CompactedSsTable::VT_ID, None).unwrap()}
  }
  #[inline]
  pub fn info(&self) -> SsTableInfo<'a> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<SsTableInfo>>(CompactedSsTable::VT_INFO, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for CompactedSsTable<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<CompactedSstId>>("id", Self::VT_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<SsTableInfo>>("info", Self::VT_INFO, true)?
     .finish();
    Ok(())
  }
}
pub struct CompactedSsTableArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<CompactedSstId<'a>>>,
    pub info: Option<flatbuffers::WIPOffset<SsTableInfo<'a>>>,
}
impl<'a> Default for CompactedSsTableArgs<'a> {
  #[inline]
  fn default() -> Self {
    CompactedSsTableArgs {
      id: None, // required field
      info: None, // required field
    }
  }
}

pub struct CompactedSsTableBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CompactedSsTableBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<CompactedSstId<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CompactedSstId>>(CompactedSsTable::VT_ID, id);
  }
  #[inline]
  pub fn add_info(&mut self, info: flatbuffers::WIPOffset<SsTableInfo<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<SsTableInfo>>(CompactedSsTable::VT_INFO, info);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CompactedSsTableBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    CompactedSsTableBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<CompactedSsTable<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, CompactedSsTable::VT_ID,"id");
    self.fbb_.required(o, CompactedSsTable::VT_INFO,"info");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for CompactedSsTable<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("CompactedSsTable");
      ds.field("id", &self.id());
      ds.field("info", &self.info());
      ds.finish()
  }
}
pub enum SsTableInfoOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SsTableInfo<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SsTableInfo<'a> {
  type Inner = SsTableInfo<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SsTableInfo<'a> {
  pub const VT_FIRST_KEY: flatbuffers::VOffsetT = 4;
  pub const VT_INDEX_OFFSET: flatbuffers::VOffsetT = 6;
  pub const VT_INDEX_LEN: flatbuffers::VOffsetT = 8;
  pub const VT_FILTER_OFFSET: flatbuffers::VOffsetT = 10;
  pub const VT_FILTER_LEN: flatbuffers::VOffsetT = 12;
  pub const VT_COMPRESSION_FORMAT: flatbuffers::VOffsetT = 14;
  pub const VT_ROW_ATTRIBUTES: flatbuffers::VOffsetT = 16;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SsTableInfo { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SsTableInfoArgs<'args>
  ) -> flatbuffers::WIPOffset<SsTableInfo<'bldr>> {
    let mut builder = SsTableInfoBuilder::new(_fbb);
    builder.add_filter_len(args.filter_len);
    builder.add_filter_offset(args.filter_offset);
    builder.add_index_len(args.index_len);
    builder.add_index_offset(args.index_offset);
    if let Some(x) = args.row_attributes { builder.add_row_attributes(x); }
    if let Some(x) = args.first_key { builder.add_first_key(x); }
    builder.add_compression_format(args.compression_format);
    builder.finish()
  }


  #[inline]
  pub fn first_key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(SsTableInfo::VT_FIRST_KEY, None)}
  }
  #[inline]
  pub fn index_offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SsTableInfo::VT_INDEX_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn index_len(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SsTableInfo::VT_INDEX_LEN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn filter_offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SsTableInfo::VT_FILTER_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn filter_len(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(SsTableInfo::VT_FILTER_LEN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn compression_format(&self) -> CompressionFormat {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<CompressionFormat>(SsTableInfo::VT_COMPRESSION_FORMAT, Some(CompressionFormat::None)).unwrap()}
  }
  #[inline]
  pub fn row_attributes(&self) -> Option<flatbuffers::Vector<'a, SstRowAttribute>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, SstRowAttribute>>>(SsTableInfo::VT_ROW_ATTRIBUTES, None)}
  }
}

impl flatbuffers::Verifiable for SsTableInfo<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("first_key", Self::VT_FIRST_KEY, false)?
     .visit_field::<u64>("index_offset", Self::VT_INDEX_OFFSET, false)?
     .visit_field::<u64>("index_len", Self::VT_INDEX_LEN, false)?
     .visit_field::<u64>("filter_offset", Self::VT_FILTER_OFFSET, false)?
     .visit_field::<u64>("filter_len", Self::VT_FILTER_LEN, false)?
     .visit_field::<CompressionFormat>("compression_format", Self::VT_COMPRESSION_FORMAT, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, SstRowAttribute>>>("row_attributes", Self::VT_ROW_ATTRIBUTES, false)?
     .finish();
    Ok(())
  }
}
pub struct SsTableInfoArgs<'a> {
    pub first_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub index_offset: u64,
    pub index_len: u64,
    pub filter_offset: u64,
    pub filter_len: u64,
    pub compression_format: CompressionFormat,
    pub row_attributes: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, SstRowAttribute>>>,
}
impl<'a> Default for SsTableInfoArgs<'a> {
  #[inline]
  fn default() -> Self {
    SsTableInfoArgs {
      first_key: None,
      index_offset: 0,
      index_len: 0,
      filter_offset: 0,
      filter_len: 0,
      compression_format: CompressionFormat::None,
      row_attributes: None,
    }
  }
}

pub struct SsTableInfoBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SsTableInfoBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_first_key(&mut self, first_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SsTableInfo::VT_FIRST_KEY, first_key);
  }
  #[inline]
  pub fn add_index_offset(&mut self, index_offset: u64) {
    self.fbb_.push_slot::<u64>(SsTableInfo::VT_INDEX_OFFSET, index_offset, 0);
  }
  #[inline]
  pub fn add_index_len(&mut self, index_len: u64) {
    self.fbb_.push_slot::<u64>(SsTableInfo::VT_INDEX_LEN, index_len, 0);
  }
  #[inline]
  pub fn add_filter_offset(&mut self, filter_offset: u64) {
    self.fbb_.push_slot::<u64>(SsTableInfo::VT_FILTER_OFFSET, filter_offset, 0);
  }
  #[inline]
  pub fn add_filter_len(&mut self, filter_len: u64) {
    self.fbb_.push_slot::<u64>(SsTableInfo::VT_FILTER_LEN, filter_len, 0);
  }
  #[inline]
  pub fn add_compression_format(&mut self, compression_format: CompressionFormat) {
    self.fbb_.push_slot::<CompressionFormat>(SsTableInfo::VT_COMPRESSION_FORMAT, compression_format, CompressionFormat::None);
  }
  #[inline]
  pub fn add_row_attributes(&mut self, row_attributes: flatbuffers::WIPOffset<flatbuffers::Vector<'b , SstRowAttribute>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SsTableInfo::VT_ROW_ATTRIBUTES, row_attributes);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SsTableInfoBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SsTableInfoBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SsTableInfo<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SsTableInfo<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SsTableInfo");
      ds.field("first_key", &self.first_key());
      ds.field("index_offset", &self.index_offset());
      ds.field("index_len", &self.index_len());
      ds.field("filter_offset", &self.filter_offset());
      ds.field("filter_len", &self.filter_len());
      ds.field("compression_format", &self.compression_format());
      ds.field("row_attributes", &self.row_attributes());
      ds.finish()
  }
}
pub enum BlockMetaOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BlockMeta<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BlockMeta<'a> {
  type Inner = BlockMeta<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BlockMeta<'a> {
  pub const VT_OFFSET: flatbuffers::VOffsetT = 4;
  pub const VT_FIRST_KEY: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BlockMeta { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args BlockMetaArgs<'args>
  ) -> flatbuffers::WIPOffset<BlockMeta<'bldr>> {
    let mut builder = BlockMetaBuilder::new(_fbb);
    builder.add_offset(args.offset);
    if let Some(x) = args.first_key { builder.add_first_key(x); }
    builder.finish()
  }


  #[inline]
  pub fn offset(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(BlockMeta::VT_OFFSET, Some(0)).unwrap()}
  }
  #[inline]
  pub fn first_key(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(BlockMeta::VT_FIRST_KEY, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for BlockMeta<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("offset", Self::VT_OFFSET, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("first_key", Self::VT_FIRST_KEY, true)?
     .finish();
    Ok(())
  }
}
pub struct BlockMetaArgs<'a> {
    pub offset: u64,
    pub first_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for BlockMetaArgs<'a> {
  #[inline]
  fn default() -> Self {
    BlockMetaArgs {
      offset: 0,
      first_key: None, // required field
    }
  }
}

pub struct BlockMetaBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> BlockMetaBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_offset(&mut self, offset: u64) {
    self.fbb_.push_slot::<u64>(BlockMeta::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn add_first_key(&mut self, first_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BlockMeta::VT_FIRST_KEY, first_key);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> BlockMetaBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    BlockMetaBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BlockMeta<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, BlockMeta::VT_FIRST_KEY,"first_key");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BlockMeta<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BlockMeta");
      ds.field("offset", &self.offset());
      ds.field("first_key", &self.first_key());
      ds.finish()
  }
}
pub enum SsTableIndexOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SsTableIndex<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SsTableIndex<'a> {
  type Inner = SsTableIndex<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SsTableIndex<'a> {
  pub const VT_BLOCK_META: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SsTableIndex { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SsTableIndexArgs<'args>
  ) -> flatbuffers::WIPOffset<SsTableIndex<'bldr>> {
    let mut builder = SsTableIndexBuilder::new(_fbb);
    if let Some(x) = args.block_meta { builder.add_block_meta(x); }
    builder.finish()
  }


  #[inline]
  pub fn block_meta(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta>>>>(SsTableIndex::VT_BLOCK_META, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for SsTableIndex<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BlockMeta>>>>("block_meta", Self::VT_BLOCK_META, true)?
     .finish();
    Ok(())
  }
}
pub struct SsTableIndexArgs<'a> {
    pub block_meta: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BlockMeta<'a>>>>>,
}
impl<'a> Default for SsTableIndexArgs<'a> {
  #[inline]
  fn default() -> Self {
    SsTableIndexArgs {
      block_meta: None, // required field
    }
  }
}

pub struct SsTableIndexBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SsTableIndexBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_block_meta(&mut self, block_meta: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BlockMeta<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SsTableIndex::VT_BLOCK_META, block_meta);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SsTableIndexBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SsTableIndexBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SsTableIndex<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, SsTableIndex::VT_BLOCK_META,"block_meta");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SsTableIndex<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SsTableIndex");
      ds.field("block_meta", &self.block_meta());
      ds.finish()
  }
}
pub enum ManifestV1Offset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ManifestV1<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ManifestV1<'a> {
  type Inner = ManifestV1<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ManifestV1<'a> {
  pub const VT_MANIFEST_ID: flatbuffers::VOffsetT = 4;
  pub const VT_WRITER_EPOCH: flatbuffers::VOffsetT = 6;
  pub const VT_COMPACTOR_EPOCH: flatbuffers::VOffsetT = 8;
  pub const VT_WAL_ID_LAST_COMPACTED: flatbuffers::VOffsetT = 10;
  pub const VT_WAL_ID_LAST_SEEN: flatbuffers::VOffsetT = 12;
  pub const VT_L0_LAST_COMPACTED: flatbuffers::VOffsetT = 14;
  pub const VT_L0: flatbuffers::VOffsetT = 16;
  pub const VT_COMPACTED: flatbuffers::VOffsetT = 18;
  pub const VT_SNAPSHOTS: flatbuffers::VOffsetT = 20;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ManifestV1 { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args ManifestV1Args<'args>
  ) -> flatbuffers::WIPOffset<ManifestV1<'bldr>> {
    let mut builder = ManifestV1Builder::new(_fbb);
    builder.add_wal_id_last_seen(args.wal_id_last_seen);
    builder.add_wal_id_last_compacted(args.wal_id_last_compacted);
    builder.add_compactor_epoch(args.compactor_epoch);
    builder.add_writer_epoch(args.writer_epoch);
    builder.add_manifest_id(args.manifest_id);
    if let Some(x) = args.snapshots { builder.add_snapshots(x); }
    if let Some(x) = args.compacted { builder.add_compacted(x); }
    if let Some(x) = args.l0 { builder.add_l0(x); }
    if let Some(x) = args.l0_last_compacted { builder.add_l0_last_compacted(x); }
    builder.finish()
  }


  #[inline]
  pub fn manifest_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_MANIFEST_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn writer_epoch(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_WRITER_EPOCH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn compactor_epoch(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_COMPACTOR_EPOCH, Some(0)).unwrap()}
  }
  #[inline]
  pub fn wal_id_last_compacted(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_WAL_ID_LAST_COMPACTED, Some(0)).unwrap()}
  }
  #[inline]
  pub fn wal_id_last_seen(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(ManifestV1::VT_WAL_ID_LAST_SEEN, Some(0)).unwrap()}
  }
  #[inline]
  pub fn l0_last_compacted(&self) -> Option<CompactedSstId<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<CompactedSstId>>(ManifestV1::VT_L0_LAST_COMPACTED, None)}
  }
  #[inline]
  pub fn l0(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CompactedSsTable<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CompactedSsTable>>>>(ManifestV1::VT_L0, None).unwrap()}
  }
  #[inline]
  pub fn compacted(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SortedRun<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SortedRun>>>>(ManifestV1::VT_COMPACTED, None).unwrap()}
  }
  #[inline]
  pub fn snapshots(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Snapshot<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Snapshot>>>>(ManifestV1::VT_SNAPSHOTS, None)}
  }
}

impl flatbuffers::Verifiable for ManifestV1<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("manifest_id", Self::VT_MANIFEST_ID, false)?
     .visit_field::<u64>("writer_epoch", Self::VT_WRITER_EPOCH, false)?
     .visit_field::<u64>("compactor_epoch", Self::VT_COMPACTOR_EPOCH, false)?
     .visit_field::<u64>("wal_id_last_compacted", Self::VT_WAL_ID_LAST_COMPACTED, false)?
     .visit_field::<u64>("wal_id_last_seen", Self::VT_WAL_ID_LAST_SEEN, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<CompactedSstId>>("l0_last_compacted", Self::VT_L0_LAST_COMPACTED, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CompactedSsTable>>>>("l0", Self::VT_L0, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<SortedRun>>>>("compacted", Self::VT_COMPACTED, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Snapshot>>>>("snapshots", Self::VT_SNAPSHOTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ManifestV1Args<'a> {
    pub manifest_id: u64,
    pub writer_epoch: u64,
    pub compactor_epoch: u64,
    pub wal_id_last_compacted: u64,
    pub wal_id_last_seen: u64,
    pub l0_last_compacted: Option<flatbuffers::WIPOffset<CompactedSstId<'a>>>,
    pub l0: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CompactedSsTable<'a>>>>>,
    pub compacted: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<SortedRun<'a>>>>>,
    pub snapshots: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Snapshot<'a>>>>>,
}
impl<'a> Default for ManifestV1Args<'a> {
  #[inline]
  fn default() -> Self {
    ManifestV1Args {
      manifest_id: 0,
      writer_epoch: 0,
      compactor_epoch: 0,
      wal_id_last_compacted: 0,
      wal_id_last_seen: 0,
      l0_last_compacted: None,
      l0: None, // required field
      compacted: None, // required field
      snapshots: None,
    }
  }
}

pub struct ManifestV1Builder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> ManifestV1Builder<'a, 'b, A> {
  #[inline]
  pub fn add_manifest_id(&mut self, manifest_id: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_MANIFEST_ID, manifest_id, 0);
  }
  #[inline]
  pub fn add_writer_epoch(&mut self, writer_epoch: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_WRITER_EPOCH, writer_epoch, 0);
  }
  #[inline]
  pub fn add_compactor_epoch(&mut self, compactor_epoch: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_COMPACTOR_EPOCH, compactor_epoch, 0);
  }
  #[inline]
  pub fn add_wal_id_last_compacted(&mut self, wal_id_last_compacted: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_WAL_ID_LAST_COMPACTED, wal_id_last_compacted, 0);
  }
  #[inline]
  pub fn add_wal_id_last_seen(&mut self, wal_id_last_seen: u64) {
    self.fbb_.push_slot::<u64>(ManifestV1::VT_WAL_ID_LAST_SEEN, wal_id_last_seen, 0);
  }
  #[inline]
  pub fn add_l0_last_compacted(&mut self, l0_last_compacted: flatbuffers::WIPOffset<CompactedSstId<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<CompactedSstId>>(ManifestV1::VT_L0_LAST_COMPACTED, l0_last_compacted);
  }
  #[inline]
  pub fn add_l0(&mut self, l0: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CompactedSsTable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestV1::VT_L0, l0);
  }
  #[inline]
  pub fn add_compacted(&mut self, compacted: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<SortedRun<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestV1::VT_COMPACTED, compacted);
  }
  #[inline]
  pub fn add_snapshots(&mut self, snapshots: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Snapshot<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestV1::VT_SNAPSHOTS, snapshots);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> ManifestV1Builder<'a, 'b, A> {
    let start = _fbb.start_table();
    ManifestV1Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ManifestV1<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, ManifestV1::VT_L0,"l0");
    self.fbb_.required(o, ManifestV1::VT_COMPACTED,"compacted");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ManifestV1<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ManifestV1");
      ds.field("manifest_id", &self.manifest_id());
      ds.field("writer_epoch", &self.writer_epoch());
      ds.field("compactor_epoch", &self.compactor_epoch());
      ds.field("wal_id_last_compacted", &self.wal_id_last_compacted());
      ds.field("wal_id_last_seen", &self.wal_id_last_seen());
      ds.field("l0_last_compacted", &self.l0_last_compacted());
      ds.field("l0", &self.l0());
      ds.field("compacted", &self.compacted());
      ds.field("snapshots", &self.snapshots());
      ds.finish()
  }
}
pub enum SortedRunOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct SortedRun<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for SortedRun<'a> {
  type Inner = SortedRun<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> SortedRun<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SSTS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    SortedRun { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SortedRunArgs<'args>
  ) -> flatbuffers::WIPOffset<SortedRun<'bldr>> {
    let mut builder = SortedRunBuilder::new(_fbb);
    if let Some(x) = args.ssts { builder.add_ssts(x); }
    builder.add_id(args.id);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(SortedRun::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ssts(&self) -> flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CompactedSsTable<'a>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CompactedSsTable>>>>(SortedRun::VT_SSTS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for SortedRun<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<CompactedSsTable>>>>("ssts", Self::VT_SSTS, true)?
     .finish();
    Ok(())
  }
}
pub struct SortedRunArgs<'a> {
    pub id: u32,
    pub ssts: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<CompactedSsTable<'a>>>>>,
}
impl<'a> Default for SortedRunArgs<'a> {
  #[inline]
  fn default() -> Self {
    SortedRunArgs {
      id: 0,
      ssts: None, // required field
    }
  }
}

pub struct SortedRunBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SortedRunBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u32) {
    self.fbb_.push_slot::<u32>(SortedRun::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_ssts(&mut self, ssts: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<CompactedSsTable<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(SortedRun::VT_SSTS, ssts);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SortedRunBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SortedRunBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<SortedRun<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, SortedRun::VT_SSTS,"ssts");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for SortedRun<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("SortedRun");
      ds.field("id", &self.id());
      ds.field("ssts", &self.ssts());
      ds.finish()
  }
}
pub enum SnapshotOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Snapshot<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Snapshot<'a> {
  type Inner = Snapshot<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Snapshot<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_MANIFEST_ID: flatbuffers::VOffsetT = 6;
  pub const VT_SNAPSHOT_EXPIRE_TIME_S: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Snapshot { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args SnapshotArgs
  ) -> flatbuffers::WIPOffset<Snapshot<'bldr>> {
    let mut builder = SnapshotBuilder::new(_fbb);
    builder.add_manifest_id(args.manifest_id);
    builder.add_id(args.id);
    builder.add_snapshot_expire_time_s(args.snapshot_expire_time_s);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Snapshot::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn manifest_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Snapshot::VT_MANIFEST_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn snapshot_expire_time_s(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(Snapshot::VT_SNAPSHOT_EXPIRE_TIME_S, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Snapshot<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<u64>("manifest_id", Self::VT_MANIFEST_ID, false)?
     .visit_field::<u32>("snapshot_expire_time_s", Self::VT_SNAPSHOT_EXPIRE_TIME_S, false)?
     .finish();
    Ok(())
  }
}
pub struct SnapshotArgs {
    pub id: u64,
    pub manifest_id: u64,
    pub snapshot_expire_time_s: u32,
}
impl<'a> Default for SnapshotArgs {
  #[inline]
  fn default() -> Self {
    SnapshotArgs {
      id: 0,
      manifest_id: 0,
      snapshot_expire_time_s: 0,
    }
  }
}

pub struct SnapshotBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> SnapshotBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Snapshot::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_manifest_id(&mut self, manifest_id: u64) {
    self.fbb_.push_slot::<u64>(Snapshot::VT_MANIFEST_ID, manifest_id, 0);
  }
  #[inline]
  pub fn add_snapshot_expire_time_s(&mut self, snapshot_expire_time_s: u32) {
    self.fbb_.push_slot::<u32>(Snapshot::VT_SNAPSHOT_EXPIRE_TIME_S, snapshot_expire_time_s, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> SnapshotBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    SnapshotBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Snapshot<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Snapshot<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Snapshot");
      ds.field("id", &self.id());
      ds.field("manifest_id", &self.manifest_id());
      ds.field("snapshot_expire_time_s", &self.snapshot_expire_time_s());
      ds.finish()
  }
}
